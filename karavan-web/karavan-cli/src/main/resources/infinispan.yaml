---
# Source: infinispan/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: infinispan-generated-secret
  labels:
    app: infinispan-secret-identities
    clusterName: infinispan
    helm.sh/chart: infinispan-0.3.1
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
    app.kubernetes.io/version: "14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
    "helm.sh/resource-policy": keep
type: Opaque
stringData:
  username: monitor
  password: $INFINISPAN_PASSWORD
  identities-batch: |-
    user create admin -p $INFINISPAN_PASSWORD
    user create monitor -p $INFINISPAN_PASSWORD --users-file metrics-users.properties --groups-file metrics-groups.properties
---
# Source: infinispan/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: infinispan-configuration
  annotations:
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
  labels:
    app: infinispan-configmap-configuration
    clusterName: infinispan
    helm.sh/chart: infinispan-0.3.1
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
    app.kubernetes.io/version: "14.0"
    app.kubernetes.io/managed-by: Helm
data:
  infinispan.yml: |-
    infinispan:
      cacheContainer:
        name: default
        security:
          authorization: {}
        transport:
          cluster: ${infinispan.cluster.name:cluster}
          node-name: ${infinispan.node.name:}
          stack: kubernetes
      server:
        endpoints:
          - connectors:
              hotrod:
                hotrodConnector: null
              rest:
                restConnector: null
            securityRealm: default
            socketBinding: default
          - connectors:
              rest:
                restConnector:
                  authentication:
                    mechanisms: BASIC
            securityRealm: metrics
            socketBinding: metrics
        interfaces:
          - inetAddress:
              value: ${infinispan.bind.address:127.0.0.1}
            name: public
        security:
          credentialStores:
            - clearTextCredential:
                clearText: secret
              name: credentials
              path: credentials.pfx
          securityRealms:
            - name: default
              propertiesRealm:
                groupProperties:
                  path: groups.properties
                groupsAttribute: Roles
                userProperties:
                  path: users.properties
            - name: metrics
              propertiesRealm:
                groupProperties:
                  path: metrics-groups.properties
                  relativeTo: infinispan.server.config.path
                groupsAttribute: Roles
                userProperties:
                  path: metrics-users.properties
                  relativeTo: infinispan.server.config.path
        socketBindings:
          defaultInterface: public
          portOffset: ${infinispan.socket.binding.port-offset:0}
          socketBinding:
            - name: default
              port: 11222
            - name: metrics
              port: 11223
  log4j2.xml: |-
    <Configuration name="InfinispanServerConfig" monitorInterval="60" shutdownHook="disable">
        <Properties>
            <Property name="path">${sys:infinispan.server.log.path}</Property>
            <Property name="accessLogPattern">%X{address} %X{user} [%d{dd/MMM/yyyy:HH:mm:ss Z}] &quot;%X{method} %m %X{protocol}&quot; %X{status} %X{requestSize} %X{responseSize} %X{duration}%n</Property>
        </Properties>
        <Appenders>
            <!-- Colored output on the console -->
            <Console name="STDOUT">
                <PatternLayout pattern="%highlight{%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p (%t) [%c] %m%throwable}{INFO=normal, DEBUG=normal, TRACE=normal}%n"/>
            </Console>
            
            <!-- Rolling file -->
            <RollingFile name="FILE" createOnDemand="true"
                         fileName="${path}/server.log"
                         filePattern="${path}/server.log.%d{yyyy-MM-dd}-%i">
                <Policies>
                    <OnStartupTriggeringPolicy />
                    <SizeBasedTriggeringPolicy size="100 MB" />
                    <TimeBasedTriggeringPolicy />
                </Policies>
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p (%t) [%c] %m%throwable%n"/>
            </RollingFile>
            
            <!-- Rolling file -->
            <RollingFile name="AUDIT-FILE" createOnDemand="true"
                         fileName="${path}/audit.log"
                         filePattern="${path}/audit.log.%d{yyyy-MM-dd}-%i">
                <Policies>
                    <OnStartupTriggeringPolicy />
                    <SizeBasedTriggeringPolicy size="100 MB" />
                    <TimeBasedTriggeringPolicy />
                </Policies>
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss,SSS} %m%n"/>
            </RollingFile>
            
            <!-- Rolling JSON file, disabled by default -->
            <RollingFile name="JSON-FILE" createOnDemand="true"
                         fileName="${path}/server.log.json"
                         filePattern="${path}/server.log.json.%d{yyyy-MM-dd}-%i">
                <Policies>
                    <OnStartupTriggeringPolicy />
                    <SizeBasedTriggeringPolicy size="100 MB" />
                    <TimeBasedTriggeringPolicy />
                </Policies>
                <JsonLayout compact="true" eventEol="true" stacktraceAsString="true">
                    <KeyValuePair key="time" value="$${date:yyyy-MM-dd'T'HH:mm:ss.SSSZ}" />
                </JsonLayout>
            </RollingFile>
            
            <!-- Rolling HotRod access log, disabled by default -->
            <RollingFile name="HR-ACCESS-FILE" createOnDemand="true"
                         fileName="${path}/hotrod-access.log"
                         filePattern="${path}/hotrod-access.log.%i">
                <Policies>
                    <SizeBasedTriggeringPolicy size="100 MB" />
                </Policies>
                <PatternLayout pattern="${accessLogPattern}"/>
            </RollingFile>
            <!-- Rolling REST access log, disabled by default -->
            <RollingFile name="REST-ACCESS-FILE" createOnDemand="true"
                         fileName="${path}/rest-access.log"
                         filePattern="${path}/rest-access.log.%i">
                <Policies>
                    <SizeBasedTriggeringPolicy size="100 MB" />
                </Policies>
                <PatternLayout pattern="${accessLogPattern}"/>
            </RollingFile>
        </Appenders>
        
        <Loggers>
            <Root level="INFO">
                <AppenderRef ref="STDOUT"/>
                
                <!-- Uncomment just one of the two lines bellow to use alternatively JSON logging or plain-text logging to file-->
                <AppenderRef ref="FILE"/>
                <!--      <AppenderRef ref="JSON-FILE"/>-->
            </Root>
            
            <!-- Set to INFO to enable audit logging -->
            <Logger name="org.infinispan.AUDIT" additivity="false" level="ERROR">
                <AppenderRef ref="AUDIT-FILE"/>
            </Logger>
            
            <!-- Set to TRACE to enable access logging for Hot Rod requests -->
            <Logger name="org.infinispan.HOTROD_ACCESS_LOG" additivity="false" level="INFO">
                <AppenderRef ref="HR-ACCESS-FILE"/>
            </Logger>
            
            <!-- Set to TRACE to enable access logging for REST requests -->
            <Logger name="org.infinispan.REST_ACCESS_LOG" additivity="false" level="INFO">
                <AppenderRef ref="REST-ACCESS-FILE"/>
            </Logger>
            <Logger name="com.arjuna" level="WARN" />
            <Logger name="io.netty.handler.ssl.ApplicationProtocolNegotiationHandler" level="ERROR" />
        
        </Loggers>
    </Configuration>
---
# Source: infinispan/templates/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: infinispan-metrics
  annotations:
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
  labels:
    app: infinispan-service-metrics
    clusterName: infinispan
    helm.sh/chart: infinispan-0.3.1
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
    app.kubernetes.io/version: "14.0"
    app.kubernetes.io/managed-by: Helm

spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 11223
      protocol: TCP
      name: infinispan-met
  selector:
    clusterName: infinispan
    app: infinispan-pod
---
# Source: infinispan/templates/ping-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: infinispan-ping
  annotations:
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
  labels:
    app: infinispan-service-ping
    clusterName: infinispan
    helm.sh/chart: infinispan-0.3.1
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
    app.kubernetes.io/version: "14.0"
    app.kubernetes.io/managed-by: Helm

spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 8888
      protocol: TCP
      name: infinispan
  selector:
    clusterName: infinispan
    app: infinispan-pod
---
# Source: infinispan/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: infinispan
  annotations:
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
  labels:
    app: infinispan-service
    clusterName: infinispan
    helm.sh/chart: infinispan-0.3.1
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
    app.kubernetes.io/version: "14.0"
    app.kubernetes.io/managed-by: Helm

spec:
  type: ClusterIP
  ports:
    - port: 11222
      protocol: TCP
      name: infinispan
  selector:
    clusterName: infinispan
    app: infinispan-pod
---
# Source: infinispan/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: infinispan
  labels:
    clusterName: infinispan
    helm.sh/chart: infinispan-0.3.1
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
    app.kubernetes.io/version: "14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: infinispan
    meta.helm.sh/release-namespace: default
    "openshift.io/display-name": "Infinispan Cluster"
    "openshift.io/documentation-url": "http://infinispan.org/documentation/"
spec:
  serviceName: ""
  replicas: 1
  selector:
    matchLabels:
      app: infinispan-pod
      clusterName: infinispan
  template:
    metadata:
      annotations:
        checksum/config: ca538163e78ecc00edba4e1673737254437fed9ada3bb7baf487e5c0802b3d15
        checksum/identities: fb28be4f4f777fd60bbc48733fd8087787ba577efcb9616a64f83d1617f6106c
      labels:
        app: infinispan-pod
        clusterName: infinispan

    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    clusterName: infinispan
                    app: infinispan-pod
                topologyKey: kubernetes.io/hostname
              weight: 100

      containers:
        - env:
            - name: JAVA_OPTIONS
              value:
            - name: IDENTITIES_BATCH
              value: /etc/security/identities-batch
            - name: SERVER_LIBS
              value:
          image: $INFINISPAN_IMAGE
          imagePullPolicy: Always
          args:
            - --cluster-name=infinispan
            - --server-config=/etc/config/infinispan.yml
            - --logging-config=/etc/config/log4j2.xml
            - --bind-address=0.0.0.0
            - -Djgroups.dns.query=infinispan-ping.default.svc.cluster.local
          ports:
            - containerPort: 8888
              name: ping
              protocol: TCP
            - containerPort: 11222
              name: infinispan
              protocol: TCP
            - containerPort: 11223
              name: infinispan-met
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: rest/v2/cache-managers/default/health/status
              port: 11222
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 80
          name: infinispan
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: rest/v2/cache-managers/default/health/status
              port: 11222
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 80
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: rest/v2/cache-managers/default/health/status
              port: 11222
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 80
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
            - mountPath: /opt/infinispan/server/data
              name: data-volume
            - mountPath: /etc/security
              name: identities-volume
      volumes:
        - configMap:
            name: infinispan-configuration
          name: config-volume
        - name: identities-volume
          secret:
            secretName: infinispan-generated-secret
        - name: data-volume
          emptyDir: { }
  updateStrategy:
    type: RollingUpdate
